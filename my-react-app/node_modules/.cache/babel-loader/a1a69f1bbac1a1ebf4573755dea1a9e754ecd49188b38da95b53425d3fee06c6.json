{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91961\\\\Desktop\\\\fprac3\\\\fedproject\\\\my-react-app\\\\src\\\\Home\\\\Booking\\\\BookingPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './BookingPage.css';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingPage = () => {\n  _s();\n  const {\n    name\n  } = useParams();\n  const [venueData, setVenueData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  const [playDuration, setPlayDuration] = useState(1); // Default 1 hour\n  const [availableDays, setAvailableDays] = useState([]);\n  const [priceperhour, setPricePerHour] = useState(0);\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]); // Half-hour slots\n  const shopname = name.replace(/-/g, ' ').split('_')[0];\n  const effectRan = useRef(false);\n  const [address, setAddress] = useState('');\n  useEffect(() => {\n    if (effectRan.current === false) {\n      const fetchVenueData = async () => {\n        try {\n          const response = await fetch('http://localhost:5000/shop/loadground', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              name\n            }),\n            credentials: 'include'\n          });\n          if (response.ok) {\n            const data = await response.json();\n            setVenueData(data.ground);\n            setAddress(data.address);\n            setPricePerHour(data.ground.priceperhour);\n            extractAvailableDays(data.ground.availability);\n          } else {\n            const errorData = await response.json();\n            setError(errorData.message);\n          }\n        } catch (error) {\n          setError('An error occurred while fetching Ground.');\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchVenueData();\n      effectRan.current = true;\n    }\n    return () => {\n      effectRan.current = true;\n    };\n  }, [name]);\n  const extractAvailableDays = availability => {\n    const days = availability.map(timing => timing.day);\n    setAvailableDays(days);\n  };\n  const openBookingModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeBookingModal = () => {\n    setIsModalOpen(false);\n    setSelectedDate('');\n    setSelectedTime('');\n    setAvailableTimeSlots([]); // Reset available time slots\n    setPlayDuration(1); // Reset play duration to 1 hour\n  };\n  const handleDateSelection = date => {\n    setSelectedDate(date);\n    fetchAvailableTimeSlots(date); // Fetch time slots when a date is selected\n  };\n\n  // Function to generate 30-minute time slots\n  const generateTimeSlots = (start, end) => {\n    const startTime = convertTimeStringToMinutes(start);\n    const endTime = convertTimeStringToMinutes(end);\n    const slots = [];\n    for (let time = startTime; time + 30 <= endTime; time += 30) {\n      const slotStart = convertMinutesToTimeString(time);\n      slots.push(slotStart);\n    }\n    return slots;\n  };\n  const fetchAvailableTimeSlots = date => {\n    const selectedDay = new Date(date).toLocaleString('en-US', {\n      weekday: 'long'\n    });\n    const selectedDayAvailability = venueData.availability.find(availability => availability.day === selectedDay);\n    if (selectedDayAvailability) {\n      const slots = [];\n      selectedDayAvailability.times.forEach(timeSlot => {\n        const generatedSlots = generateTimeSlots(timeSlot.start, timeSlot.end);\n        slots.push(...generatedSlots);\n      });\n      // Adjust available slots based on selected duration\n      adjustSlotsForDuration(slots, selectedDayAvailability.times);\n    } else {\n      setAvailableTimeSlots([]);\n    }\n  };\n  const adjustSlotsForDuration = (slots, times) => {\n    const closingTime = '8:00 PM'; // Example closing time\n    const closingTimeMinutes = convertTimeStringToMinutes(closingTime);\n    const maxStartTime = closingTimeMinutes - playDuration * 60; // Calculate latest start time\n\n    const filteredSlots = slots.filter(slot => {\n      const slotMinutes = convertTimeStringToMinutes(slot);\n      return slotMinutes <= maxStartTime;\n    });\n    setAvailableTimeSlots(filteredSlots);\n  };\n  const handleTimeSelection = time => {\n    setSelectedTime(time);\n  };\n  const handleDurationIncrement = () => {\n    setPlayDuration(prev => prev + 0.5); // Increment duration by 0.5 hours\n    fetchAvailableTimeSlots(selectedDate); // Refetch time slots when duration changes\n  };\n  const getTodayDate = () => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  };\n  const isDateAvailable = date => {\n    const day = new Date(date).toLocaleString('en-US', {\n      weekday: 'long'\n    });\n    return availableDays.includes(day);\n  };\n  const isDisabled = date => {\n    return isDateAvailable(date); // Disable the date if it's not available\n  };\n  const convertTimeStringToMinutes = timeString => {\n    const [time, modifier] = timeString.split(' ');\n    let [hours, minutes] = time.split(':');\n    if (modifier === 'PM' && hours !== '12') {\n      hours = parseInt(hours) + 12;\n    }\n    if (modifier === 'AM' && hours === '12') {\n      hours = '00';\n    }\n    return parseInt(hours) * 60 + parseInt(minutes);\n  };\n  const convertMinutesToTimeString = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    const modifier = hours >= 12 ? 'PM' : 'AM';\n    const formattedHours = hours % 12 === 0 ? 12 : hours % 12;\n    const formattedMinutes = mins.toString().padStart(2, '0');\n    return `${formattedHours}:${formattedMinutes} ${modifier}`;\n  };\n  const handleBookNow = async () => {\n    // Add your booking logic here, for example:\n    const bookingDetails = {\n      date: selectedDate,\n      time: selectedTime,\n      duration: playDuration,\n      venue: venueData.groundname,\n      address: address,\n      price: priceperhour * playDuration\n    };\n\n    // Send booking details to the server\n    try {\n      const response = await fetch('http://localhost:5000/shop/bookground', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(bookingDetails),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const result = await response.json();\n        alert(`Booking confirmed! ${result.message}`);\n        closeBookingModal(); // Close modal on successful booking\n      } else {\n        const errorData = await response.json();\n        alert(`Booking failed: ${errorData.message}`);\n      }\n    } catch (error) {\n      alert('An error occurred while booking the ground.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bp-loading\",\n      children: \"Loading Ground...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bp-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 12\n    }, this);\n  }\n  if (!venueData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bp-no-data\",\n      children: \"No venue data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bp-booking-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"bp-main-title\",\n      children: [shopname, \" - \", venueData.groundname]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bp-content\",\n      children: [/*#__PURE__*/_jsxDEV(VenueDetails, {\n        name: venueData.groundname,\n        dimensions: venueData.grounddimensions ? `Length: ${venueData.grounddimensions.length}m, Width: ${venueData.grounddimensions.width}m` : 'No dimensions available',\n        address: address ? `Address: ${address}` : 'Address not Available',\n        image: venueData.image,\n        rating: venueData.reviews ? (venueData.reviews.reduce((sum, review) => sum + review.rating, 0) / venueData.reviews.length).toFixed(1) : 'No ratings yet',\n        ratingCount: venueData.reviews ? venueData.reviews.length : 0,\n        timing: venueData.availability || [],\n        facilities: venueData.facilities || [],\n        pricePerHour: venueData.priceperhour\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bp-side-info\",\n        children: /*#__PURE__*/_jsxDEV(BookingInfo, {\n          pricePerHour: venueData.priceperhour,\n          onBookNow: openBookingModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bp-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bp-modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Book Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: selectedDate,\n          onChange: handleDateSelection,\n          minDate: new Date(),\n          filterDate: isDisabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Duration:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [playDuration, \" hours\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDurationIncrement,\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), availableTimeSlots.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: availableTimeSlots.map(slot => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleTimeSelection(slot),\n                children: slot\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 23\n              }, this)\n            }, slot, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No available time slots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bp-book-button\",\n          onClick: handleBookNow,\n          children: \"Confirm Booking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bp-close-button\",\n          onClick: closeBookingModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(BookingPage, \"zhYz9Eai8X3eDu1XqTb8BdxoKDE=\", false, function () {\n  return [useParams];\n});\n_c = BookingPage;\nconst VenueDetails = ({\n  name,\n  dimensions,\n  address,\n  image,\n  rating,\n  ratingCount,\n  timing,\n  facilities,\n  pricePerHour\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"bp-venue-details\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n    src: image,\n    alt: `${name}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: dimensions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Rating: \", rating, \" (\", ratingCount, \" reviews)\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Facilities: \", facilities.join(', ')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Price per hour: $\", pricePerHour]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Timing: \", timing.map(t => `${t.start} - ${t.end}`).join(', ')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 276,\n  columnNumber: 3\n}, this);\n_c2 = VenueDetails;\nconst BookingInfo = ({\n  pricePerHour,\n  onBookNow\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"bp-booking-info\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Booking Information\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Price per Hour: $\", pricePerHour]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onBookNow,\n    children: \"Book Now\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 289,\n  columnNumber: 3\n}, this);\n_c3 = BookingInfo;\nexport default BookingPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BookingPage\");\n$RefreshReg$(_c2, \"VenueDetails\");\n$RefreshReg$(_c3, \"BookingInfo\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useParams","DatePicker","jsxDEV","_jsxDEV","BookingPage","_s","name","venueData","setVenueData","loading","setLoading","error","setError","isModalOpen","setIsModalOpen","selectedDate","setSelectedDate","selectedTime","setSelectedTime","playDuration","setPlayDuration","availableDays","setAvailableDays","priceperhour","setPricePerHour","availableTimeSlots","setAvailableTimeSlots","shopname","replace","split","effectRan","address","setAddress","current","fetchVenueData","response","fetch","method","headers","body","JSON","stringify","credentials","ok","data","json","ground","extractAvailableDays","availability","errorData","message","days","map","timing","day","openBookingModal","closeBookingModal","handleDateSelection","date","fetchAvailableTimeSlots","generateTimeSlots","start","end","startTime","convertTimeStringToMinutes","endTime","slots","time","slotStart","convertMinutesToTimeString","push","selectedDay","Date","toLocaleString","weekday","selectedDayAvailability","find","times","forEach","timeSlot","generatedSlots","adjustSlotsForDuration","closingTime","closingTimeMinutes","maxStartTime","filteredSlots","filter","slot","slotMinutes","handleTimeSelection","handleDurationIncrement","prev","getTodayDate","today","toISOString","isDateAvailable","includes","isDisabled","timeString","modifier","hours","minutes","parseInt","Math","floor","mins","formattedHours","formattedMinutes","toString","padStart","handleBookNow","bookingDetails","duration","venue","groundname","price","result","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","VenueDetails","dimensions","grounddimensions","length","width","image","rating","reviews","reduce","sum","review","toFixed","ratingCount","facilities","pricePerHour","BookingInfo","onBookNow","selected","onChange","minDate","filterDate","onClick","_c","src","alt","join","t","_c2","_c3","$RefreshReg$"],"sources":["C:/Users/91961/Desktop/fprac3/fedproject/my-react-app/src/Home/Booking/BookingPage.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './BookingPage.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst BookingPage = () => {\r\n  const { name } = useParams();\r\n  const [venueData, setVenueData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [selectedTime, setSelectedTime] = useState('');\r\n  const [playDuration, setPlayDuration] = useState(1); // Default 1 hour\r\n  const [availableDays, setAvailableDays] = useState([]);\r\n  const [priceperhour, setPricePerHour] = useState(0);\r\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]); // Half-hour slots\r\n  const shopname = name.replace(/-/g, ' ').split('_')[0];\r\n  const effectRan = useRef(false);\r\n  const [address, setAddress] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (effectRan.current === false) {\r\n      const fetchVenueData = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/shop/loadground', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name }),\r\n            credentials: 'include',\r\n          });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setVenueData(data.ground);\r\n            setAddress(data.address);\r\n            setPricePerHour(data.ground.priceperhour);\r\n            extractAvailableDays(data.ground.availability);\r\n          } else {\r\n            const errorData = await response.json();\r\n            setError(errorData.message);\r\n          }\r\n        } catch (error) {\r\n          setError('An error occurred while fetching Ground.');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchVenueData();\r\n      effectRan.current = true;\r\n    }\r\n\r\n    return () => {\r\n      effectRan.current = true;\r\n    };\r\n  }, [name]);\r\n\r\n  const extractAvailableDays = (availability) => {\r\n    const days = availability.map(timing => timing.day);\r\n    setAvailableDays(days);\r\n  };\r\n\r\n  const openBookingModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeBookingModal = () => {\r\n    setIsModalOpen(false);\r\n    setSelectedDate('');\r\n    setSelectedTime('');\r\n    setAvailableTimeSlots([]); // Reset available time slots\r\n    setPlayDuration(1); // Reset play duration to 1 hour\r\n  };\r\n\r\n  const handleDateSelection = (date) => {\r\n    setSelectedDate(date);\r\n    fetchAvailableTimeSlots(date); // Fetch time slots when a date is selected\r\n  };\r\n\r\n  // Function to generate 30-minute time slots\r\n  const generateTimeSlots = (start, end) => {\r\n    const startTime = convertTimeStringToMinutes(start);\r\n    const endTime = convertTimeStringToMinutes(end);\r\n    const slots = [];\r\n\r\n    for (let time = startTime; time + 30 <= endTime; time += 30) {\r\n      const slotStart = convertMinutesToTimeString(time);\r\n      slots.push(slotStart);\r\n    }\r\n\r\n    return slots;\r\n  };\r\n\r\n  const fetchAvailableTimeSlots = (date) => {\r\n    const selectedDay = new Date(date).toLocaleString('en-US', { weekday: 'long' });\r\n    const selectedDayAvailability = venueData.availability.find(\r\n      (availability) => availability.day === selectedDay\r\n    );\r\n\r\n    if (selectedDayAvailability) {\r\n      const slots = [];\r\n      selectedDayAvailability.times.forEach((timeSlot) => {\r\n        const generatedSlots = generateTimeSlots(timeSlot.start, timeSlot.end);\r\n        slots.push(...generatedSlots);\r\n      });\r\n      // Adjust available slots based on selected duration\r\n      adjustSlotsForDuration(slots, selectedDayAvailability.times);\r\n    } else {\r\n      setAvailableTimeSlots([]);\r\n    }\r\n  };\r\n\r\n  const adjustSlotsForDuration = (slots, times) => {\r\n    const closingTime = '8:00 PM'; // Example closing time\r\n    const closingTimeMinutes = convertTimeStringToMinutes(closingTime);\r\n    const maxStartTime = closingTimeMinutes - (playDuration * 60); // Calculate latest start time\r\n\r\n    const filteredSlots = slots.filter((slot) => {\r\n      const slotMinutes = convertTimeStringToMinutes(slot);\r\n      return slotMinutes <= maxStartTime;\r\n    });\r\n\r\n    setAvailableTimeSlots(filteredSlots);\r\n  };\r\n\r\n  const handleTimeSelection = (time) => {\r\n    setSelectedTime(time);\r\n  };\r\n\r\n  const handleDurationIncrement = () => {\r\n    setPlayDuration(prev => prev + 0.5); // Increment duration by 0.5 hours\r\n    fetchAvailableTimeSlots(selectedDate); // Refetch time slots when duration changes\r\n  };\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    return today.toISOString().split('T')[0];\r\n  };\r\n\r\n  const isDateAvailable = (date) => {\r\n    const day = new Date(date).toLocaleString('en-US', { weekday: 'long' });\r\n    return availableDays.includes(day);\r\n  };\r\n\r\n  const isDisabled = (date) => {\r\n    return isDateAvailable(date); // Disable the date if it's not available\r\n  };\r\n\r\n  const convertTimeStringToMinutes = (timeString) => {\r\n    const [time, modifier] = timeString.split(' ');\r\n    let [hours, minutes] = time.split(':');\r\n    if (modifier === 'PM' && hours !== '12') {\r\n      hours = parseInt(hours) + 12;\r\n    }\r\n    if (modifier === 'AM' && hours === '12') {\r\n      hours = '00';\r\n    }\r\n    return parseInt(hours) * 60 + parseInt(minutes);\r\n  };\r\n\r\n  const convertMinutesToTimeString = (minutes) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    const modifier = hours >= 12 ? 'PM' : 'AM';\r\n    const formattedHours = hours % 12 === 0 ? 12 : hours % 12;\r\n    const formattedMinutes = mins.toString().padStart(2, '0');\r\n    return `${formattedHours}:${formattedMinutes} ${modifier}`;\r\n  };\r\n\r\n  const handleBookNow = async () => {\r\n    // Add your booking logic here, for example:\r\n    const bookingDetails = {\r\n      date: selectedDate,\r\n      time: selectedTime,\r\n      duration: playDuration,\r\n      venue: venueData.groundname,\r\n      address: address,\r\n      price: priceperhour * playDuration,\r\n    };\r\n\r\n    // Send booking details to the server\r\n    try {\r\n      const response = await fetch('http://localhost:5000/shop/bookground', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(bookingDetails),\r\n        credentials: 'include',\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        alert(`Booking confirmed! ${result.message}`);\r\n        closeBookingModal(); // Close modal on successful booking\r\n      } else {\r\n        const errorData = await response.json();\r\n        alert(`Booking failed: ${errorData.message}`);\r\n      }\r\n    } catch (error) {\r\n      alert('An error occurred while booking the ground.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"bp-loading\">Loading Ground...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"bp-error\">{error}</div>;\r\n  }\r\n\r\n  if (!venueData) {\r\n    return <div className=\"bp-no-data\">No venue data available.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"bp-booking-page\">\r\n      <h1 className=\"bp-main-title\">{shopname} - {venueData.groundname}</h1>\r\n      <div className=\"bp-content\">\r\n        <VenueDetails\r\n          name={venueData.groundname}\r\n          dimensions={venueData.grounddimensions ? `Length: ${venueData.grounddimensions.length}m, Width: ${venueData.grounddimensions.width}m` : 'No dimensions available'}\r\n          address={address ? `Address: ${address}` : 'Address not Available'}\r\n          image={venueData.image}\r\n          rating={venueData.reviews ? (venueData.reviews.reduce((sum, review) => sum + review.rating, 0) / venueData.reviews.length).toFixed(1) : 'No ratings yet'}\r\n          ratingCount={venueData.reviews ? venueData.reviews.length : 0}\r\n          timing={venueData.availability || []}\r\n          facilities={venueData.facilities || []}\r\n          pricePerHour={venueData.priceperhour}\r\n        />\r\n        <div className=\"bp-side-info\">\r\n          <BookingInfo pricePerHour={venueData.priceperhour} onBookNow={openBookingModal} />\r\n        </div>\r\n      </div>\r\n\r\n      {isModalOpen && (\r\n        <div className=\"bp-modal\">\r\n          <div className=\"bp-modal-content\">\r\n            <h2>Book Now</h2>\r\n            <DatePicker \r\n              selected={selectedDate} \r\n              onChange={handleDateSelection} \r\n              minDate={new Date()}\r\n              filterDate={isDisabled}\r\n            />\r\n            <div>\r\n              <p>Select Duration:</p>\r\n              <span>{playDuration} hours</span>\r\n              <button onClick={handleDurationIncrement}>+</button>\r\n            </div>\r\n            <div>\r\n              <p>Select Time:</p>\r\n              {availableTimeSlots.length > 0 ? (\r\n                <ul>\r\n                  {availableTimeSlots.map((slot) => (\r\n                    <li key={slot}>\r\n                      <button onClick={() => handleTimeSelection(slot)}>{slot}</button>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <p>No available time slots</p>\r\n              )}\r\n            </div>\r\n            <button className=\"bp-book-button\" onClick={handleBookNow}>Confirm Booking</button>\r\n            <button className=\"bp-close-button\" onClick={closeBookingModal}>Close</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VenueDetails = ({ name, dimensions, address, image, rating, ratingCount, timing, facilities, pricePerHour }) => (\r\n  <div className=\"bp-venue-details\">\r\n    <h2>{name}</h2>\r\n    <img src={image} alt={`${name}`} />\r\n    <p>{dimensions}</p>\r\n    <p>{address}</p>\r\n    <p>Rating: {rating} ({ratingCount} reviews)</p>\r\n    <p>Facilities: {facilities.join(', ')}</p>\r\n    <p>Price per hour: ${pricePerHour}</p>\r\n    <p>Timing: {timing.map(t => `${t.start} - ${t.end}`).join(', ')}</p>\r\n  </div>\r\n);\r\n\r\nconst BookingInfo = ({ pricePerHour, onBookNow }) => (\r\n  <div className=\"bp-booking-info\">\r\n    <h3>Booking Information</h3>\r\n    <p>Price per Hour: ${pricePerHour}</p>\r\n    <button onClick={onBookNow}>Book Now</button>\r\n  </div>\r\n);\r\n\r\nexport default BookingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}