{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91961\\\\Desktop\\\\fprac\\\\fedproject\\\\my-react-app\\\\src\\\\Shop\\\\ShopDashboard.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport \"./ShopDashboard.css\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShopDashboard = () => {\n  _s();\n  const [state, setState] = useState({});\n  const [daysPerWeek, setDaysPerWeek] = useState(0);\n  const [daysArray, setDaysArray] = useState([]);\n  const [timesArray, setTimesArray] = useState([]);\n  const [grounds, setGrounds] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkShopSession = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/shop/checkshopsession', {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          navigate('/shoplogin');\n        } else {\n          const data = await response.json();\n          console.log('Shop Data:', data); // Verify structure\n          setState(data.shop);\n          setGrounds(data.shop.grounds || []); // Set grounds\n        }\n      } catch (error) {\n        console.error('Error fetching shop session:', error);\n        alert('An error occurred while fetching shop session.');\n      }\n    };\n    checkShopSession();\n  }, [navigate]);\n  useEffect(() => {\n    console.log('Grounds State Updated:', grounds); // Check state changes\n  }, [grounds]);\n  const updatesubmit = async e => {\n    e.preventDefault();\n    const {\n      shopname,\n      address\n    } = e.target.elements;\n    try {\n      const response = await fetch('http://localhost:5000/shop/updateshop', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          shopname: shopname.value,\n          address: address.value\n        }),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setState(data.updatedShop);\n        alert('Shop details updated successfully');\n      } else {\n        const error = await response.json();\n        alert(`Update failed: ${error.msg}`);\n      }\n    } catch (error) {\n      console.error('Error updating shop details:', error);\n      alert('An error occurred while updating shop details.');\n    }\n  };\n  const addGround = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const formData = new FormData(form);\n    const availability = daysArray.map((day, index) => ({\n      day,\n      times: [{\n        start: timesArray[index].start,\n        end: timesArray[index].end\n      }]\n    }));\n    formData.append('availability', JSON.stringify(availability));\n    try {\n      const response = await fetch('http://localhost:5000/shop/addground', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.fromEntries(formData)),\n        // Convert FormData to JSON\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const updatedData = await response.json();\n        console.log('Updated Grounds Data:', updatedData); // Check response\n        setGrounds(updatedData.shop.grounds || []); // Update grounds\n        alert('Ground added successfully!');\n        form.reset();\n        setDaysPerWeek(0);\n        setDaysArray([]);\n        setTimesArray([]);\n      } else {\n        const error = await response.json();\n        alert(`Error adding ground: ${error.msg}`);\n      }\n    } catch (error) {\n      console.error('Error adding ground:', error);\n      alert('An error occurred while adding the ground.');\n    }\n  };\n  const handleDaysPerWeekChange = e => {\n    const value = parseInt(e.target.value);\n    setDaysPerWeek(value);\n    setDaysArray(Array.from({\n      length: value\n    }, () => ''));\n    setTimesArray(Array.from({\n      length: value\n    }, () => ({\n      start: '',\n      end: ''\n    })));\n  };\n  const handleDayChange = (index, newValue) => {\n    const updatedDaysArray = [...daysArray];\n    updatedDaysArray[index] = newValue;\n    setDaysArray(updatedDaysArray);\n  };\n  const handleTimeChange = (index, field, value) => {\n    const updatedTimesArray = [...timesArray];\n    updatedTimesArray[index] = {\n      ...updatedTimesArray[index],\n      [field]: value\n    };\n    setTimesArray(updatedTimesArray);\n  };\n  const generateDayOptions = () => {\n    const allDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    const selectedDays = daysArray.filter(day => day !== '');\n    return allDays.map(day => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: day,\n      disabled: selectedDays.includes(day),\n      children: day\n    }, day, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sd-shop-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"sd-title\",\n      children: \"Shop Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"sd-email\",\n      children: [\"Email: \", state.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"sd-owner\",\n      children: [\"Owner Name: \", state.owner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"sd-update-form\",\n      onSubmit: updatesubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"sd-label\",\n        htmlFor: \"shopname\",\n        children: \"Shop Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"sd-input\",\n        type: \"text\",\n        name: \"shopname\",\n        id: \"shopname\",\n        placeholder: \"Shop Name\",\n        defaultValue: state.shopname,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"sd-label\",\n        htmlFor: \"address\",\n        children: \"Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"sd-input\",\n        type: \"text\",\n        name: \"address\",\n        id: \"address\",\n        placeholder: \"Address\",\n        defaultValue: state.address,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sd-button\",\n        type: \"submit\",\n        children: \"Update Shop Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"sd-add-ground-form\",\n      onSubmit: addGround,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sd-button\",\n        type: \"submit\",\n        children: \"Add Ground\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sd-ground-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"sd-title\",\n        children: \"List of Grounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"sd-ground-ul\",\n        children: grounds.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"sd-ground-li\",\n          children: \"No grounds available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this) : grounds.map((ground, index) => {\n          var _ground$groundDimensi, _ground$groundDimensi2, _ground$availability;\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"sd-ground-li\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: ground.groundname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Price per Hour: \", ground.priceperhour]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Maximum Number of Players: \", ground.maxplayers]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Ground Length: \", ((_ground$groundDimensi = ground.groundDimensions) === null || _ground$groundDimensi === void 0 ? void 0 : _ground$groundDimensi.length) || 'N/A']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Ground Width: \", ((_ground$groundDimensi2 = ground.groundDimensions) === null || _ground$groundDimensi2 === void 0 ? void 0 : _ground$groundDimensi2.width) || 'N/A']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Facilities: \", ground.facilities]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Surface Type: \", ground.surfaceType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Availability:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"sd-availability-ul\",\n              children: ((_ground$availability = ground.availability) === null || _ground$availability === void 0 ? void 0 : _ground$availability.length) > 0 ? ground.availability.map((dayData, dayIndex) => {\n                var _dayData$times;\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"sd-availability-li\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: [\"Day: \", dayData.day]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"sd-times-ul\",\n                    children: ((_dayData$times = dayData.times) === null || _dayData$times === void 0 ? void 0 : _dayData$times.length) > 0 ? dayData.times.map((time, timeIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"sd-times-li\",\n                      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Start Time: \", time.start]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 201,\n                        columnNumber: 65\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"End Time: \", time.end]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 202,\n                        columnNumber: 65\n                      }, this)]\n                    }, timeIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 61\n                    }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: \"No Times Available\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 197,\n                    columnNumber: 49\n                  }, this)]\n                }, dayIndex, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 45\n                }, this);\n              }) : /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"No Availability Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(ShopDashboard, \"zI/Xi2gahPVrzRix5CPlh35l178=\", false, function () {\n  return [useNavigate];\n});\n_c = ShopDashboard;\nexport default ShopDashboard;\nvar _c;\n$RefreshReg$(_c, \"ShopDashboard\");","map":{"version":3,"names":["useEffect","useState","React","useNavigate","jsxDEV","_jsxDEV","ShopDashboard","_s","state","setState","daysPerWeek","setDaysPerWeek","daysArray","setDaysArray","timesArray","setTimesArray","grounds","setGrounds","navigate","checkShopSession","response","fetch","credentials","ok","data","json","console","log","shop","error","alert","updatesubmit","e","preventDefault","shopname","address","target","elements","method","headers","body","JSON","stringify","value","updatedShop","msg","addGround","form","formData","FormData","availability","map","day","index","times","start","end","append","Object","fromEntries","updatedData","reset","handleDaysPerWeekChange","parseInt","Array","from","length","handleDayChange","newValue","updatedDaysArray","handleTimeChange","field","updatedTimesArray","generateDayOptions","allDays","selectedDays","filter","disabled","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","email","owner","onSubmit","htmlFor","type","name","id","placeholder","defaultValue","required","ground","_ground$groundDimensi","_ground$groundDimensi2","_ground$availability","groundname","priceperhour","maxplayers","groundDimensions","width","facilities","surfaceType","dayData","dayIndex","_dayData$times","time","timeIndex","_c","$RefreshReg$"],"sources":["C:/Users/91961/Desktop/fprac/fedproject/my-react-app/src/Shop/ShopDashboard.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport \"./ShopDashboard.css\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ShopDashboard = () => { \r\n    const [state, setState] = useState({});  \r\n    const [daysPerWeek, setDaysPerWeek] = useState(0);  \r\n    const [daysArray, setDaysArray] = useState([]); \r\n    const [timesArray, setTimesArray] = useState([]); \r\n    const [grounds, setGrounds] = useState([]); \r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const checkShopSession = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/shop/checkshopsession', {\r\n                    credentials: 'include'\r\n                });\r\n                if (!response.ok) {\r\n                    navigate('/shoplogin');\r\n                } else {\r\n                    const data = await response.json();\r\n                    console.log('Shop Data:', data); // Verify structure\r\n                    setState(data.shop);\r\n                    setGrounds(data.shop.grounds || []);  // Set grounds\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching shop session:', error);\r\n                alert('An error occurred while fetching shop session.');\r\n            }\r\n        };\r\n\r\n        checkShopSession();\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        console.log('Grounds State Updated:', grounds); // Check state changes\r\n    }, [grounds]);\r\n\r\n    const updatesubmit = async (e) => {\r\n        e.preventDefault();\r\n        const { shopname, address } = e.target.elements;\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/shop/updateshop', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    shopname: shopname.value,\r\n                    address: address.value\r\n                }),\r\n                credentials: 'include'\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setState(data.updatedShop);\r\n                alert('Shop details updated successfully');\r\n            } else {\r\n                const error = await response.json();\r\n                alert(`Update failed: ${error.msg}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating shop details:', error);\r\n            alert('An error occurred while updating shop details.');\r\n        }\r\n    };\r\n\r\n    const addGround = async (e) => {\r\n        e.preventDefault();\r\n        const form = e.target;\r\n        const formData = new FormData(form);\r\n        const availability = daysArray.map((day, index) => ({\r\n            day,\r\n            times: [{ start: timesArray[index].start, end: timesArray[index].end }]\r\n        }));\r\n        formData.append('availability', JSON.stringify(availability));\r\n        \r\n        try {\r\n            const response = await fetch('http://localhost:5000/shop/addground', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(Object.fromEntries(formData)), // Convert FormData to JSON\r\n                credentials: 'include'\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedData = await response.json();\r\n                console.log('Updated Grounds Data:', updatedData); // Check response\r\n                setGrounds(updatedData.shop.grounds || []); // Update grounds\r\n                alert('Ground added successfully!');\r\n                form.reset();\r\n                setDaysPerWeek(0);\r\n                setDaysArray([]);\r\n                setTimesArray([]);\r\n            } else {\r\n                const error = await response.json();\r\n                alert(`Error adding ground: ${error.msg}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding ground:', error);\r\n            alert('An error occurred while adding the ground.');\r\n        }\r\n    };\r\n\r\n    const handleDaysPerWeekChange = (e) => {\r\n        const value = parseInt(e.target.value);\r\n        setDaysPerWeek(value);\r\n        setDaysArray(Array.from({ length: value }, () => ''));\r\n        setTimesArray(Array.from({ length: value }, () => ({ start: '', end: '' })));\r\n    };\r\n\r\n    const handleDayChange = (index, newValue) => {\r\n        const updatedDaysArray = [...daysArray];\r\n        updatedDaysArray[index] = newValue;\r\n        setDaysArray(updatedDaysArray);\r\n    };\r\n\r\n    const handleTimeChange = (index, field, value) => {\r\n        const updatedTimesArray = [...timesArray];\r\n        updatedTimesArray[index] = { ...updatedTimesArray[index], [field]: value };\r\n        setTimesArray(updatedTimesArray);\r\n    };\r\n\r\n    const generateDayOptions = () => {\r\n        const allDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n        const selectedDays = daysArray.filter(day => day !== '');\r\n        return allDays.map((day) => (\r\n            <option key={day} value={day} disabled={selectedDays.includes(day)}>\r\n                {day}\r\n            </option>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className=\"sd-shop-dashboard\">\r\n            <h1 className=\"sd-title\">Shop Dashboard</h1>\r\n            <h3 className=\"sd-email\">Email: {state.email}</h3>\r\n            <h3 className=\"sd-owner\">Owner Name: {state.owner}</h3>\r\n            \r\n            <form className=\"sd-update-form\" onSubmit={updatesubmit}>\r\n                <label className=\"sd-label\" htmlFor=\"shopname\">Shop Name:</label>\r\n                <input\r\n                    className=\"sd-input\"\r\n                    type=\"text\"\r\n                    name=\"shopname\"\r\n                    id=\"shopname\"\r\n                    placeholder=\"Shop Name\"\r\n                    defaultValue={state.shopname}\r\n                    required\r\n                />\r\n                <label className=\"sd-label\" htmlFor=\"address\">Address:</label>\r\n                <input\r\n                    className=\"sd-input\"\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    id=\"address\"\r\n                    placeholder=\"Address\"\r\n                    defaultValue={state.address}\r\n                    required\r\n                />\r\n                <button className=\"sd-button\" type=\"submit\">Update Shop Details</button>\r\n            </form>\r\n            \r\n            <form className=\"sd-add-ground-form\" onSubmit={addGround}>\r\n                {/* Ground input fields */}\r\n                {/* Add your input fields here similar to the existing code */}\r\n                <button className=\"sd-button\" type=\"submit\">Add Ground</button>\r\n            </form>\r\n            \r\n            <div className=\"sd-ground-list\">\r\n                <h2 className=\"sd-title\">List of Grounds</h2>\r\n                <ul className=\"sd-ground-ul\">\r\n                    {grounds.length === 0 ? (\r\n                        <li className=\"sd-ground-li\">No grounds available</li>\r\n                    ) : (\r\n                        grounds.map((ground, index) => (\r\n                            <li key={index} className=\"sd-ground-li\">\r\n                                <h3>{ground.groundname}</h3>\r\n                                <p>Price per Hour: {ground.priceperhour}</p>\r\n                                <p>Maximum Number of Players: {ground.maxplayers}</p>\r\n                                <p>Ground Length: {ground.groundDimensions?.length || 'N/A'}</p>\r\n                                <p>Ground Width: {ground.groundDimensions?.width || 'N/A'}</p>\r\n                                <p>Facilities: {ground.facilities}</p>\r\n                                <p>Surface Type: {ground.surfaceType}</p>\r\n                                <h4>Availability:</h4>\r\n                                <ul className=\"sd-availability-ul\">\r\n                                    {ground.availability?.length > 0 ? (\r\n                                        ground.availability.map((dayData, dayIndex) => (\r\n                                            <li key={dayIndex} className=\"sd-availability-li\">\r\n                                                <strong>Day: {dayData.day}</strong>\r\n                                                <ul className=\"sd-times-ul\">\r\n                                                    {dayData.times?.length > 0 ? (\r\n                                                        dayData.times.map((time, timeIndex) => (\r\n                                                            <li key={timeIndex} className=\"sd-times-li\">\r\n                                                                <p>Start Time: {time.start}</p>\r\n                                                                <p>End Time: {time.end}</p>\r\n                                                            </li>\r\n                                                        ))\r\n                                                    ) : (\r\n                                                        <li>No Times Available</li>\r\n                                                    )}\r\n                                                </ul>\r\n                                            </li>\r\n                                        ))\r\n                                    ) : (\r\n                                        <li>No Availability Data</li>\r\n                                    )}\r\n                                </ul>\r\n                            </li>\r\n                        ))\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShopDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}