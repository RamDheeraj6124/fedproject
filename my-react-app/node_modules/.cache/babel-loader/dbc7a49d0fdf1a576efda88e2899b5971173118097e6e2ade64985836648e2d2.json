{"ast":null,"code":"// Module dependencies.\nvar pause = require('pause'),\n  util = require('util'),\n  Strategy = require('passport-strategy');\n\n/**\n *  Create a new `SessionStrategy` object.\n *\n * An instance of this strategy is automatically used when creating an\n * `{@link Authenticator}`.  As such, it is typically unnecessary to create an\n * instance using this constructor.\n *\n * @classdesc This `Strategy` authenticates HTTP requests based on the contents\n * of session data.\n *\n * The login session must have been previously initiated, typically upon the\n * user interactively logging in using a HTML form.  During session initiation,\n * the logged-in user's information is persisted to the session so that it can\n * be restored on subsequent requests.\n *\n * Note that this strategy merely restores the authentication state from the\n * session, it does not authenticate the session itself.  Authenticating the\n * underlying session is assumed to have been done by the middleware\n * implementing session support.  This is typically accomplished by setting a\n * signed cookie, and verifying the signature of that cookie on incoming\n * requests.\n *\n * In {@link https://expressjs.com/ Express}-based apps, session support is\n * commonly provided by {@link https://github.com/expressjs/session `express-session`}\n * or {@link https://github.com/expressjs/cookie-session `cookie-session`}.\n *\n * @public\n * @class\n * @augments base.Strategy\n * @param {Object} [options]\n * @param {string} [options.key='passport'] - Determines what property (\"key\") on\n *          the session data where login session data is located.  The login\n *          session is stored and read from `req.session[key]`.\n * @param {function} deserializeUser - Function which deserializes user.\n */\nfunction SessionStrategy(options, deserializeUser) {\n  if (typeof options == 'function') {\n    deserializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  Strategy.call(this);\n\n  /** The name of the strategy, set to `'session'`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  this.name = 'session';\n  this._key = options.key || 'passport';\n  this._deserializeUser = deserializeUser;\n}\n\n// Inherit from `passport.Strategy`.\nutil.inherits(SessionStrategy, Strategy);\n\n/**\n * Authenticate request based on current session data.\n *\n * When login session data is present in the session, that data will be used to\n * restore login state across across requests by calling the deserialize user\n * function.\n *\n * If login session data is not present, the request will be passed to the next\n * middleware, rather than failing authentication - which is the behavior of\n * most other strategies.  This deviation allows session authentication to be\n * performed at the application-level, rather than the individual route level,\n * while allowing both authenticated and unauthenticated requests and rendering\n * responses accordingly.  Routes that require authentication will need to guard\n * that condition.\n *\n * This function is protected, and should not be called directly.  Instead,\n * use `passport.authenticate()` middleware and specify the {@link SessionStrategy#name `name`}\n * of this strategy and any options.\n *\n * @protected\n * @param {http.IncomingMessage} req - The Node.js {@link https://nodejs.org/api/http.html#class-httpincomingmessage `IncomingMessage`}\n *          object.\n * @param {Object} [options]\n * @param {boolean} [options.pauseStream=false] - When `true`, data events on\n *          the request will be paused, and then resumed after the asynchronous\n *          `deserializeUser` function has completed.  This is only necessary in\n *          cases where later middleware in the stack are listening for events,\n *          and ensures that those events are not missed.\n *\n * @example\n * passport.authenticate('session');\n */\nSessionStrategy.prototype.authenticate = function (req, options) {\n  if (!req.session) {\n    return this.error(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?'));\n  }\n  options = options || {};\n  var self = this,\n    su;\n  if (req.session[this._key]) {\n    su = req.session[this._key].user;\n  }\n  if (su || su === 0) {\n    // NOTE: Stream pausing is desirable in the case where later middleware is\n    //       listening for events emitted from request.  For discussion on the\n    //       matter, refer to: https://github.com/jaredhanson/passport/pull/106\n\n    var paused = options.pauseStream ? pause(req) : null;\n    this._deserializeUser(su, req, function (err, user) {\n      if (err) {\n        return self.error(err);\n      }\n      if (!user) {\n        delete req.session[self._key].user;\n      } else {\n        var property = req._userProperty || 'user';\n        req[property] = user;\n      }\n      self.pass();\n      if (paused) {\n        paused.resume();\n      }\n    });\n  } else {\n    self.pass();\n  }\n};\n\n// Export `SessionStrategy`.\nmodule.exports = SessionStrategy;","map":{"version":3,"names":["pause","require","util","Strategy","SessionStrategy","options","deserializeUser","undefined","call","name","_key","key","_deserializeUser","inherits","prototype","authenticate","req","session","error","Error","self","su","user","paused","pauseStream","err","property","_userProperty","pass","resume","module","exports"],"sources":["C:/Users/91961/node_modules/passport/lib/strategies/session.js"],"sourcesContent":["// Module dependencies.\nvar pause = require('pause')\n  , util = require('util')\n  , Strategy = require('passport-strategy');\n\n\n/**\n *  Create a new `SessionStrategy` object.\n *\n * An instance of this strategy is automatically used when creating an\n * `{@link Authenticator}`.  As such, it is typically unnecessary to create an\n * instance using this constructor.\n *\n * @classdesc This `Strategy` authenticates HTTP requests based on the contents\n * of session data.\n *\n * The login session must have been previously initiated, typically upon the\n * user interactively logging in using a HTML form.  During session initiation,\n * the logged-in user's information is persisted to the session so that it can\n * be restored on subsequent requests.\n *\n * Note that this strategy merely restores the authentication state from the\n * session, it does not authenticate the session itself.  Authenticating the\n * underlying session is assumed to have been done by the middleware\n * implementing session support.  This is typically accomplished by setting a\n * signed cookie, and verifying the signature of that cookie on incoming\n * requests.\n *\n * In {@link https://expressjs.com/ Express}-based apps, session support is\n * commonly provided by {@link https://github.com/expressjs/session `express-session`}\n * or {@link https://github.com/expressjs/cookie-session `cookie-session`}.\n *\n * @public\n * @class\n * @augments base.Strategy\n * @param {Object} [options]\n * @param {string} [options.key='passport'] - Determines what property (\"key\") on\n *          the session data where login session data is located.  The login\n *          session is stored and read from `req.session[key]`.\n * @param {function} deserializeUser - Function which deserializes user.\n */\nfunction SessionStrategy(options, deserializeUser) {\n  if (typeof options == 'function') {\n    deserializeUser = options;\n    options = undefined;\n  }\n  options = options || {};\n  \n  Strategy.call(this);\n  \n  /** The name of the strategy, set to `'session'`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  this.name = 'session';\n  this._key = options.key || 'passport';\n  this._deserializeUser = deserializeUser;\n}\n\n// Inherit from `passport.Strategy`.\nutil.inherits(SessionStrategy, Strategy);\n\n/**\n * Authenticate request based on current session data.\n *\n * When login session data is present in the session, that data will be used to\n * restore login state across across requests by calling the deserialize user\n * function.\n *\n * If login session data is not present, the request will be passed to the next\n * middleware, rather than failing authentication - which is the behavior of\n * most other strategies.  This deviation allows session authentication to be\n * performed at the application-level, rather than the individual route level,\n * while allowing both authenticated and unauthenticated requests and rendering\n * responses accordingly.  Routes that require authentication will need to guard\n * that condition.\n *\n * This function is protected, and should not be called directly.  Instead,\n * use `passport.authenticate()` middleware and specify the {@link SessionStrategy#name `name`}\n * of this strategy and any options.\n *\n * @protected\n * @param {http.IncomingMessage} req - The Node.js {@link https://nodejs.org/api/http.html#class-httpincomingmessage `IncomingMessage`}\n *          object.\n * @param {Object} [options]\n * @param {boolean} [options.pauseStream=false] - When `true`, data events on\n *          the request will be paused, and then resumed after the asynchronous\n *          `deserializeUser` function has completed.  This is only necessary in\n *          cases where later middleware in the stack are listening for events,\n *          and ensures that those events are not missed.\n *\n * @example\n * passport.authenticate('session');\n */\nSessionStrategy.prototype.authenticate = function(req, options) {\n  if (!req.session) { return this.error(new Error('Login sessions require session support. Did you forget to use `express-session` middleware?')); }\n  options = options || {};\n\n  var self = this, \n      su;\n  if (req.session[this._key]) {\n    su = req.session[this._key].user;\n  }\n\n  if (su || su === 0) {\n    // NOTE: Stream pausing is desirable in the case where later middleware is\n    //       listening for events emitted from request.  For discussion on the\n    //       matter, refer to: https://github.com/jaredhanson/passport/pull/106\n    \n    var paused = options.pauseStream ? pause(req) : null;\n    this._deserializeUser(su, req, function(err, user) {\n      if (err) { return self.error(err); }\n      if (!user) {\n        delete req.session[self._key].user;\n      } else {\n        var property = req._userProperty || 'user';\n        req[property] = user;\n      }\n      self.pass();\n      if (paused) {\n        paused.resume();\n      }\n    });\n  } else {\n    self.pass();\n  }\n};\n\n// Export `SessionStrategy`.\nmodule.exports = SessionStrategy;\n"],"mappings":"AAAA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;EACxBC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EACtBE,QAAQ,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAG3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,eAAeA,CAACC,OAAO,EAAEC,eAAe,EAAE;EACjD,IAAI,OAAOD,OAAO,IAAI,UAAU,EAAE;IAChCC,eAAe,GAAGD,OAAO;IACzBA,OAAO,GAAGE,SAAS;EACrB;EACAF,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvBF,QAAQ,CAACK,IAAI,CAAC,IAAI,CAAC;;EAEnB;AACF;AACA;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAG,SAAS;EACrB,IAAI,CAACC,IAAI,GAAGL,OAAO,CAACM,GAAG,IAAI,UAAU;EACrC,IAAI,CAACC,gBAAgB,GAAGN,eAAe;AACzC;;AAEA;AACAJ,IAAI,CAACW,QAAQ,CAACT,eAAe,EAAED,QAAQ,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,eAAe,CAACU,SAAS,CAACC,YAAY,GAAG,UAASC,GAAG,EAAEX,OAAO,EAAE;EAC9D,IAAI,CAACW,GAAG,CAACC,OAAO,EAAE;IAAE,OAAO,IAAI,CAACC,KAAK,CAAC,IAAIC,KAAK,CAAC,6FAA6F,CAAC,CAAC;EAAE;EACjJd,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIe,IAAI,GAAG,IAAI;IACXC,EAAE;EACN,IAAIL,GAAG,CAACC,OAAO,CAAC,IAAI,CAACP,IAAI,CAAC,EAAE;IAC1BW,EAAE,GAAGL,GAAG,CAACC,OAAO,CAAC,IAAI,CAACP,IAAI,CAAC,CAACY,IAAI;EAClC;EAEA,IAAID,EAAE,IAAIA,EAAE,KAAK,CAAC,EAAE;IAClB;IACA;IACA;;IAEA,IAAIE,MAAM,GAAGlB,OAAO,CAACmB,WAAW,GAAGxB,KAAK,CAACgB,GAAG,CAAC,GAAG,IAAI;IACpD,IAAI,CAACJ,gBAAgB,CAACS,EAAE,EAAEL,GAAG,EAAE,UAASS,GAAG,EAAEH,IAAI,EAAE;MACjD,IAAIG,GAAG,EAAE;QAAE,OAAOL,IAAI,CAACF,KAAK,CAACO,GAAG,CAAC;MAAE;MACnC,IAAI,CAACH,IAAI,EAAE;QACT,OAAON,GAAG,CAACC,OAAO,CAACG,IAAI,CAACV,IAAI,CAAC,CAACY,IAAI;MACpC,CAAC,MAAM;QACL,IAAII,QAAQ,GAAGV,GAAG,CAACW,aAAa,IAAI,MAAM;QAC1CX,GAAG,CAACU,QAAQ,CAAC,GAAGJ,IAAI;MACtB;MACAF,IAAI,CAACQ,IAAI,CAAC,CAAC;MACX,IAAIL,MAAM,EAAE;QACVA,MAAM,CAACM,MAAM,CAAC,CAAC;MACjB;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLT,IAAI,CAACQ,IAAI,CAAC,CAAC;EACb;AACF,CAAC;;AAED;AACAE,MAAM,CAACC,OAAO,GAAG3B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}